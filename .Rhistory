}
compute_ranking("Aracaju")
compute_ranking("São Cristóvão")
compute_ranking("Amparo do São Francisco")
compute_ranking("Propriá")
# Function to plot kmeans clusters and ranking
compute_ranking <- function(municipality){
load("data/dados_municipio.RData")
set.seed(42)
dados_municipio$pop_ln = log(dados_municipio$pop_2019)
sergipe_kmeans <- kmeans(x = scale(dados_municipio[,c(7,13)]),
centers = 4,
nstart = 100)
dados_municipio$cluster <- paste("Grupo", sergipe_kmeans$cluster)
rank <- dados_municipio %>%
arrange(cluster, ideb_valido) %>%
group_by(cluster) %>%
mutate(rank = round(rank(-ideb_valido)), g_total = n()) %>%
select(co_mun, mun, pop_ln, inv_pc, ideb_valido, cluster, rank, g_total)
rank$grupo <- -1
rank$grupo[rank$cluster == "Grupo 1"] <- "população pequena/gasto médio"
rank$grupo[rank$cluster == "Grupo 2"] <- "população grande/gasto baixo"
rank$grupo[rank$cluster == "Grupo 3"] <- "população pequena/gasto alto"
rank$grupo[rank$cluster == "Grupo 4"] <- "população média/gasto médio"
colors <- c("#F8C301","#0F3072", "#43923E", "#d73027")
data <- filter(rank, mun == municipality)
a <- list(
x = data$pop_ln,
y = data$inv_pc,
text = paste(municipality, " - ", "Posição: ", data$rank, "º entre ", data$g_total, " municípios.", sep = ""),
xref = "x",
yref = "y",
axref = "x",
ayref = "y",
showarrow = TRUE,
arrowhead = 4,
arrowsize = .5,
ax = 11,
ay = 2250
)
p <- plot_ly(rank,
x = ~pop_ln,
y = ~inv_pc,
color= ~as.factor(grupo),
colors = colors,
type = 'scatter',
text = ~mun,
marker = list(size = 10),
mode = 'markers',
hoverinfo = "text") %>%
layout(yaxis = list(title = "Gasto com educação (per capita)"),
xaxis = list(title = "População (logaritmo)"),
annotations = a) %>%
config(modeBarButtons = list(list("toImage")),
displaylogo = FALSE,
toImageButtonOptions = list(filename = "gráfico_educase"))
return(p)
}
compute_ranking("Propriá")
# Function to plot kmeans clusters and ranking
compute_ranking <- function(municipality){
load("data/dados_municipio.RData")
set.seed(42)
dados_municipio$pop_ln = log(dados_municipio$pop_2019)
sergipe_kmeans <- kmeans(x = scale(dados_municipio[,c(7,13)]),
centers = 4,
nstart = 100)
dados_municipio$cluster <- paste("Grupo", sergipe_kmeans$cluster)
rank <- dados_municipio %>%
arrange(cluster, ideb_valido) %>%
group_by(cluster) %>%
mutate(rank = round(rank(-ideb_valido)), g_total = n()) %>%
select(co_mun, mun, pop_ln, inv_pc, ideb_valido, cluster, rank, g_total)
rank$grupo <- -1
rank$grupo[rank$cluster == "Grupo 1"] <- "população pequena/gasto médio"
rank$grupo[rank$cluster == "Grupo 2"] <- "população grande/gasto baixo"
rank$grupo[rank$cluster == "Grupo 3"] <- "população pequena/gasto alto"
rank$grupo[rank$cluster == "Grupo 4"] <- "população média/gasto médio"
colors <- c("#F8C301","#0F3072", "#43923E", "#d73027")
data <- filter(rank, mun == municipality)
a <- list(
x = data$pop_ln,
y = data$inv_pc,
text = paste(municipality, " - ", "Posição: ", data$rank, "º entre ", data$g_total, " municípios.", sep = ""),
xref = "x",
yref = "y",
axref = "x",
ayref = "y",
showarrow = TRUE,
arrowhead = 4,
arrowsize = .5,
ax = 11,
ay = 2250
)
p <- plot_ly(rank,
x = ~pop_ln,
y = ~inv_pc,
color= ~as.factor(grupo),
colors = colors,
type = 'scatter',
text = ~mun,
marker = list(size = 10),
mode = 'markers',
hoverinfo = "text") %>%
layout(yaxis = list(title = "Gasto com educação (per capita)"),
xaxis = list(title = "População (logaritmo)"),
legend = list(orientation = "h",
xanchor = "center",
y = -0.2,
x = 0.5),
annotations = a) %>%
config(modeBarButtons = list(list("toImage")),
displaylogo = FALSE,
toImageButtonOptions = list(filename = "gráfico_educase"))
return(p)
}
compute_ranking("Propriá")
runApp()
runApp()
runApp()
compute_ranking <- function(municipality){
load("data/dados_municipio.RData")
set.seed(42)
dados_municipio$pop_ln = log(dados_municipio$pop_2019)
sergipe_kmeans <- kmeans(x = scale(dados_municipio[,c(7,13)]),
centers = 4,
nstart = 100)
dados_municipio$cluster <- paste("Grupo", sergipe_kmeans$cluster)
rank <- dados_municipio %>%
arrange(cluster, ideb_valido) %>%
group_by(cluster) %>%
mutate(rank = round(rank(-ideb_valido)), g_total = n()) %>%
select(co_mun, mun, pop_ln, inv_pc, ideb_valido, cluster, rank, g_total)
rank$grupo <- -1
rank$grupo[rank$cluster == "Grupo 1"] <- "população pequena/gasto médio"
rank$grupo[rank$cluster == "Grupo 2"] <- "população grande/gasto baixo"
rank$grupo[rank$cluster == "Grupo 3"] <- "população pequena/gasto alto"
rank$grupo[rank$cluster == "Grupo 4"] <- "população média/gasto médio"
colors <- c("#F8C301","#0F3072", "#43923E", "#d73027")
data <- filter(rank, mun == municipality)
a <- list(
x = data$pop_ln,
y = data$inv_pc,
text = paste(municipality, " - ", "Posição: ", data$rank, "º entre ", data$g_total, " municípios.", sep = ""),
xref = "x",
yref = "y",
axref = "x",
ayref = "y",
showarrow = TRUE,
arrowhead = 4,
arrowsize = .5,
ax = 11,
ay = 2250,
font = list(size = 20)
)
p <- plot_ly(rank,
x = ~pop_ln,
y = ~inv_pc,
color= ~as.factor(grupo),
colors = colors,
type = 'scatter',
text = ~mun,
marker = list(size = 10),
mode = 'markers',
hoverinfo = "text") %>%
layout(yaxis = list(title = "Gasto com educação (per capita)"),
xaxis = list(title = "População (logaritmo)"),
legend = list(orientation = "h",
xanchor = "center",
y = -0.2,
x = 0.5),
annotations = a) %>%
config(modeBarButtons = list(list("toImage")),
displaylogo = FALSE,
toImageButtonOptions = list(filename = "gráfico_educase"))
return(p)
}
compute_ranking("Itabi")
compute_ranking <- function(municipality){
load("data/dados_municipio.RData")
set.seed(42)
dados_municipio$pop_ln = log(dados_municipio$pop_2019)
sergipe_kmeans <- kmeans(x = scale(dados_municipio[,c(7,13)]),
centers = 4,
nstart = 100)
dados_municipio$cluster <- paste("Grupo", sergipe_kmeans$cluster)
rank <- dados_municipio %>%
arrange(cluster, ideb_valido) %>%
group_by(cluster) %>%
mutate(rank = round(rank(-ideb_valido)), g_total = n()) %>%
select(co_mun, mun, pop_ln, inv_pc, ideb_valido, cluster, rank, g_total)
rank$grupo <- -1
rank$grupo[rank$cluster == "Grupo 1"] <- "população pequena/gasto médio"
rank$grupo[rank$cluster == "Grupo 2"] <- "população grande/gasto baixo"
rank$grupo[rank$cluster == "Grupo 3"] <- "população pequena/gasto alto"
rank$grupo[rank$cluster == "Grupo 4"] <- "população média/gasto médio"
colors <- c("#F8C301","#0F3072", "#43923E", "#d73027")
data <- filter(rank, mun == municipality)
a <- list(
x = data$pop_ln,
y = data$inv_pc,
text = paste(municipality, " - ", "Posição: ", data$rank, "º entre ", data$g_total, " municípios.", sep = ""),
xref = "x",
yref = "y",
axref = "x",
ayref = "y",
showarrow = TRUE,
arrowhead = 4,
arrowsize = .5,
ax = 11,
ay = 2250,
font = list(size = 14)
)
p <- plot_ly(rank,
x = ~pop_ln,
y = ~inv_pc,
color= ~as.factor(grupo),
colors = colors,
type = 'scatter',
text = ~mun,
marker = list(size = 10),
mode = 'markers',
hoverinfo = "text") %>%
layout(yaxis = list(title = "Gasto com educação (per capita)"),
xaxis = list(title = "População (logaritmo)"),
legend = list(orientation = "h",
xanchor = "center",
y = -0.2,
x = 0.5),
annotations = a) %>%
config(modeBarButtons = list(list("toImage")),
displaylogo = FALSE,
toImageButtonOptions = list(filename = "gráfico_educase"))
return(p)
}
compute_ranking("Itabi")
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
knitr::opts_chunk$set(echo = TRUE)
A <- matrix(c(25, 45, 15, 25, 10, 30), nrow = 3, ncol = 2)
A <- matrix(c(25, 45, 15, 25, 10, 30), nrow = 3, ncol = 2)
A
A <- matrix(c(25, 15, 10, 45, 25, 30), nrow = 3, ncol = 2)
A
soma_c <- colSums(A)
soma_c <- colSums(A)
soma_l <- rowSums(A)
A <- matrix(c(25, 15, 10, 45, 25, 30), nrow = 3, ncol = 2)
B <- matrix(c(99.80, 104.29, 83.88, 95.23, 103.68, 96.01, 107.11, 104.68, 107.58), nrow = 3, ncol=3)
A <- matrix(c(25, 15, 10, 45, 25, 30), nrow = 3, ncol = 2)
B <- matrix(c(99.80, 104.29, 83.88, 95.23, 103.68, 96.01, 107.11, 104.68, 107.58), nrow = 3, ncol=3)
B
soma_c <- colSums(B)
soma_l <- rowSums(B)
sum(soma_c <- colSums(B))
sum(soma_l <- rowSums(B))
soma_c <- colSums(B)
soma_l <- rowSums(B)
dim(B)
soma_c <- colSums(B)
soma_l <- rowSums(B)
dim(B)[1]
soma_c <- colSums(B)
soma_l <- rowSums(B)
for(row in 1:nrow(B)) {
for(col in 1:ncol(B)) {
print(B[row, col])
}
}
vector <- c()
soma_c <- colSums(B)
soma_l <- rowSums(B)
vector <- c()
for(row in 1:nrow(B)) {
for(col in 1:ncol(B)) {
append(vector, (sum(B[row,])*sum(B[,col]))/rowSums(B))
}
}
soma_c <- colSums(B)
soma_l <- rowSums(B)
vector <- c()
for(row in 1:nrow(B)) {
for(col in 1:ncol(B)) {
append(vector, (sum(B[row,])*sum(B[,col]))/rowSums(B))
}
}
vector <- c()
for(row in 1:nrow(B)) {
for(col in 1:ncol(B)) {
e <- (sum(B[row,])*sum(B[,col]))/rowSums(B)
append(vector, e)
}
}
vector <- c()
for(row in 1:nrow(B)) {
for(col in 1:ncol(B)) {
e <- (sum(B[row,])*sum(B[,col]))/sum(rowSums(B))
append(vector, e)
}
}
m <- matrix()
for(row in 1:nrow(B)) {
for(col in 1:ncol(B)) {
e <- (sum(B[row,])*sum(B[,col]))/sum(rowSums(B))
append(vector, e)
}
}
m <- matrix(ncol = 3, nrow = 3)
for(row in 1:nrow(B)) {
for(col in 1:ncol(B)) {
e <- (sum(B[row,])*sum(B[,col]))/sum(rowSums(B))
append(vector, e)
}
}
m <- matrix(ncol = 3, nrow = 3)
for(row in 1:nrow(B)) {
for(col in 1:ncol(B)) {
e <- (sum(B[row,])*sum(B[,col]))/sum(rowSums(B))
matrix[row, col] <- e
}
}
m <- matrix(ncol = 3, nrow = 3)
for(row in 1:nrow(B)) {
for(col in 1:ncol(B)) {
e <- (sum(B[row,])*sum(B[,col]))/sum(rowSums(B))
matrix[row, col] <- matrix[row, col] + e
}
}
m <- matrix(c(0,0,0,0,0,0,0,0,0),ncol = 3, nrow = 3)
for(row in 1:nrow(B)) {
for(col in 1:ncol(B)) {
e <- (sum(B[row,])*sum(B[,col]))/sum(rowSums(B))
matrix[row, col] <- matrix[row, col] + e
}
}
m <- matrix()
for(row in 1:nrow(B)) {
for(col in 1:ncol(B)) {
e <- (sum(B[row,])*sum(B[,col]))/sum(rowSums(B))
m[row, col] <- m[row, col] + e
}
}
m <- matrix(ncol = 3, nrow = 3)
for(row in 1:nrow(B)) {
for(col in 1:ncol(B)) {
e <- (sum(B[row,])*sum(B[,col]))/sum(rowSums(B))
m[row, col] <- m[row, col] + e
}
}
m <- matrix(ncol = 3, nrow = 3)
for(row in 1:nrow(B)) {
for(col in 1:ncol(B)) {
e <- (sum(B[row,])*sum(B[,col]))/sum(rowSums(B))
m[row, col] <- e
}
}
A <- matrix(c(25, 15, 10, 45, 25, 30), nrow = 3, ncol = 2)
B <- matrix(c(99.80, 104.29, 83.88, 95.23, 103.68, 96.01, 107.11, 104.68, 107.58), nrow = 3, ncol=3)
dim(A)
cacula_chi <- function(matriz){
m <- matrix(ncol = dim(matriz)[1], nrow = dim(matriz)[2])
for(row in 1:nrow(matriz)) {
for(col in 1:ncol(matriz)) {
e <- (sum(matriz[row,])*sum(matriz[,col]))/sum(rowSums(matriz))
m[row, col] <- e
}
}
print(m)
}
cacula_chi <- function(matriz){
m <- matrix(ncol = dim(matriz)[1], nrow = dim(matriz)[2])
for(row in 1:nrow(matriz)) {
for(col in 1:ncol(matriz)) {
e <- (sum(matriz[row,])*sum(matriz[,col]))/sum(rowSums(matriz))
m[row, col] <- e
}
}
print(m)
}
calcula_chi(B)
calcula_chi <- function(matriz){
m <- matrix(ncol = dim(matriz)[1], nrow = dim(matriz)[2])
for(row in 1:nrow(matriz)) {
for(col in 1:ncol(matriz)) {
e <- (sum(matriz[row,])*sum(matriz[,col]))/sum(rowSums(matriz))
m[row, col] <- e
}
}
print(m)
}
calcula_chi(B)
A <- matrix(c(25, 15, 10, 45, 25, 30), nrow = 3, ncol = 2)
B <- matrix(c(99.80, 104.29, 83.88, 95.23, 103.68, 96.01, 107.11, 104.68, 107.58), nrow = 3, ncol=3)
C <- matrix(c(8,62,15,67,11,57), nrow = 2, ncol = 3)
C
calcula_chi <- function(matriz){
m <- matrix(ncol = dim(matriz)[1], nrow = dim(matriz)[2])
for(row in 1:nrow(matriz)) {
for(col in 1:ncol(matriz)) {
e <- (sum(matriz[row,])*sum(matriz[,col]))/sum(rowSums(matriz))
m[row, col] <- e
}
}
print(m)
}
calcula_chi(C)
dim(c)[1]
dim(C)[1]
A <- matrix(c(25, 15, 10, 45, 25, 30), nrow = 3, ncol = 2)
B <- matrix(c(99.80, 104.29, 83.88, 95.23, 103.68, 96.01, 107.11, 104.68, 107.58), nrow = 3, ncol=3)
C <- matrix(c(8,62,15,67,11,57), nrow = 2, ncol = 3)
C
calcula_chi <- function(matriz){
m <- matrix(ncol = dim(matriz)[1], nrow = dim(matriz)[2])
for(row in 1:nrow(matriz)) {
for(col in 1:ncol(matriz)) {
e <- (sum(matriz[row,])*sum(matriz[,col]))/sum(rowSums(matriz))
m[row, col] <- e
}
}
print(m)
}
calcula_chi(C)
calcula_chi <- function(matriz){
m <- matrix(nrow = dim(matriz)[1], ncol = dim(matriz)[2])
for(row in 1:nrow(matriz)) {
for(col in 1:ncol(matriz)) {
e <- (sum(matriz[row,])*sum(matriz[,col]))/sum(rowSums(matriz))
m[row, col] <- e
}
}
print(m)
}
calcula_chi(C)
calcula_chi <- function(matriz){
m <- matrix(nrow = dim(matriz)[1], ncol = dim(matriz)[2])
for(row in 1:nrow(matriz)) {
for(col in 1:ncol(matriz)) {
e <- (sum(matriz[row,])*sum(matriz[,col]))/sum(rowSums(matriz))
m[row, col] <- e
}
}
print("Matriz dos valores esperados:")
print(m)
d <- matriz - m
d_2 <- d*d
d_2_div <- d_2/m
est_chi <- sum(d_2_div)
print("A estatística chi quadrado para esses dados é:")
print(est_chi)
}
calcula_chi(C)
calcula_chi <- function(matriz){
m <- matrix(nrow = dim(matriz)[1], ncol = dim(matriz)[2])
for(row in 1:nrow(matriz)) {
for(col in 1:ncol(matriz)) {
e <- (sum(matriz[row,])*sum(matriz[,col]))/sum(rowSums(matriz))
m[row, col] <- e
}
}
print("Matriz dos valores esperados:")
print(m)
d <- matriz - m
d_2 <- d*d
d_2_div <- d_2/m
est_chi <- sum(d_2_div)
print("A estatística chi quadrado para esses dados é:")
print(est_chi)
}
calcula_chi(C)
chisq.test(C)
calcula_chi <- function(matriz){
m <- matrix(nrow = dim(matriz)[1], ncol = dim(matriz)[2])
for(row in 1:nrow(matriz)) {
for(col in 1:ncol(matriz)) {
e <- (sum(matriz[row,])*sum(matriz[,col]))/sum(rowSums(matriz))
m[row, col] <- e
}
}
print("Matriz dos valores esperados:")
print(m)
d <- matriz - m
d_2 <- d*d
d_2_div <- d_2/m
est_chi <- sum(d_2_div)
print("A estatística chi quadrado para esses dados é:")
print(est_chi)
}
calcula_chi(B)
chisq.test(B)
calcula_chi <- function(matriz){
m <- matrix(nrow = dim(matriz)[1], ncol = dim(matriz)[2])
for(row in 1:nrow(matriz)) {
for(col in 1:ncol(matriz)) {
e <- (sum(matriz[row,])*sum(matriz[,col]))/sum(rowSums(matriz))
m[row, col] <- e
}
}
print("Matriz dos valores esperados:")
print(m)
d <- matriz - m
d_2 <- d*d
d_2_div <- d_2/m
est_chi <- sum(d_2_div)
print("A estatística chi quadrado para esses dados é:")
print(est_chi)
}
calcula_chi(A)
chisq.test(A)
